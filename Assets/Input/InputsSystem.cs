//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/InputsSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputsSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputsSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputsSystem"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""6a2bab78-6601-409d-8a96-e3ddfe051849"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""715762da-489b-44cc-84e5-5bd018efb1fb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""3a297c3d-3542-4ad1-bc64-bde86c6d9ae7"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""29f1f80b-b42a-4586-80d0-8db23543c1e1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b9ff1928-4917-4993-921b-21111323b555"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""79c5684e-e5ea-4e28-a139-014a9b7b0106"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""eef8b033-12f0-4322-a7f3-491d019ea07d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1952758f-23eb-42b4-bc96-fe55643cb330"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AccelerometerInput"",
            ""id"": ""eff03381-2f5c-4ceb-9b94-0ba74a1069d1"",
            ""actions"": [
                {
                    ""name"": ""Accelerometerss"",
                    ""type"": ""Value"",
                    ""id"": ""c77e58f7-35a0-42c8-9335-c43c83d11b42"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e259d831-8dda-4643-9e10-10a24f82edb3"",
                    ""path"": ""<Accelerometer>/acceleration"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerometerss"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Movement = m_PlayerMovement.FindAction("Movement", throwIfNotFound: true);
        // AccelerometerInput
        m_AccelerometerInput = asset.FindActionMap("AccelerometerInput", throwIfNotFound: true);
        m_AccelerometerInput_Accelerometerss = m_AccelerometerInput.FindAction("Accelerometerss", throwIfNotFound: true);
    }

    ~@InputsSystem()
    {
        UnityEngine.Debug.Assert(!m_PlayerMovement.enabled, "This will cause a leak and performance issues, InputsSystem.PlayerMovement.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_AccelerometerInput.enabled, "This will cause a leak and performance issues, InputsSystem.AccelerometerInput.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_Movement;
    public struct PlayerMovementActions
    {
        private @InputsSystem m_Wrapper;
        public PlayerMovementActions(@InputsSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMovement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // AccelerometerInput
    private readonly InputActionMap m_AccelerometerInput;
    private List<IAccelerometerInputActions> m_AccelerometerInputActionsCallbackInterfaces = new List<IAccelerometerInputActions>();
    private readonly InputAction m_AccelerometerInput_Accelerometerss;
    public struct AccelerometerInputActions
    {
        private @InputsSystem m_Wrapper;
        public AccelerometerInputActions(@InputsSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Accelerometerss => m_Wrapper.m_AccelerometerInput_Accelerometerss;
        public InputActionMap Get() { return m_Wrapper.m_AccelerometerInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AccelerometerInputActions set) { return set.Get(); }
        public void AddCallbacks(IAccelerometerInputActions instance)
        {
            if (instance == null || m_Wrapper.m_AccelerometerInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AccelerometerInputActionsCallbackInterfaces.Add(instance);
            @Accelerometerss.started += instance.OnAccelerometerss;
            @Accelerometerss.performed += instance.OnAccelerometerss;
            @Accelerometerss.canceled += instance.OnAccelerometerss;
        }

        private void UnregisterCallbacks(IAccelerometerInputActions instance)
        {
            @Accelerometerss.started -= instance.OnAccelerometerss;
            @Accelerometerss.performed -= instance.OnAccelerometerss;
            @Accelerometerss.canceled -= instance.OnAccelerometerss;
        }

        public void RemoveCallbacks(IAccelerometerInputActions instance)
        {
            if (m_Wrapper.m_AccelerometerInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAccelerometerInputActions instance)
        {
            foreach (var item in m_Wrapper.m_AccelerometerInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AccelerometerInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AccelerometerInputActions @AccelerometerInput => new AccelerometerInputActions(this);
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IAccelerometerInputActions
    {
        void OnAccelerometerss(InputAction.CallbackContext context);
    }
}
